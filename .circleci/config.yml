version: 2.1
parameters:
  golangci-lint-version:
    type: string
    default: "v1.50.1"

  golang-version:
    type: string
    default: "1.19"

jobs:
  test:
    docker:
      - image: cimg/go:<< pipeline.parameters.golang-version >>
    steps:
      - checkout
      - run:
          name: Run tests (-race)
          command: go test -race ./...

  checks:
    docker:
      - image: cimg/go:<< pipeline.parameters.golang-version >>
    steps:
      - checkout
      - restore_cache:
          key: golangci-lint-<< pipeline.parameters.golangci-lint-version >>
      - run:
          name: Install golangci-lint
          command: |
            BIN_DIR=$(go env GOPATH)/bin

            if [ ! -f "${BIN_DIR}/golangci-lint" ]; then
                echo "golangci-lint << pipeline.parameters.golangci-lint-version >> not installed yet"
                curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b ${BIN_DIR} << pipeline.parameters.golangci-lint-version >>
            fi
      - save_cache:
          key: golangci-lint-<< pipeline.parameters.golangci-lint-version >>
          paths:
            - "/home/circleci/go/bin/golangci-lint"
      - run:
          name: Run golangci-lint
          no_output_timeout: 10m
          # See ../golangci.yml file for the configuration.
          command: |
            golangci-lint run ./...

  test-integration:
    docker:
      - image: cimg/go:<< pipeline.parameters.golang-version >>
      - image: ghcr.io/flaresolverr/flaresolverr:latest
        environment:
          LOG_LEVEL=info

    steps:
      - checkout
      - run:
          name: Run integration tests
          command: |
            go test -timeout=15m -count=1 -tags=integration -race -v ./integration_tests/...

  extract-coverage-to-code-climate:
    docker:
      - image: cimg/go:<< pipeline.parameters.golang-version >>
    steps:
      - checkout
      - run:
          name: Download CodeClimate test reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Generate coverage
          command: |
            GIT_COMMIT_SHA="${CIRCLE_SHA1}"
            GIT_BRANCH="${CIRCLE_BRANCH}"
            ./cc-test-reporter before-build
            go test -coverprofile=c.out ./...
            ./cc-test-reporter after-build --coverage-input-type gocov --prefix $(go list -m) --exit-code $?
      - store_artifacts:
          path: c.out

workflows:
  version: 2
  test-checks:
    jobs:
      - test
      - checks
      - test-integration
      - extract-coverage-to-code-climate:
          filters:
            branches:
              only: main
